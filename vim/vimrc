" reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" Vundle manage
Plugin 'gmarik/vundle'

" Main (mandatory) bundles
" ------------------------
Plugin 'tpope/vim-sensible'       " Init vimrc by tpope
Plugin 'bling/vim-airline'        " Powerline with colors
Plugin 'sjl/vitality.vim'         " AutoReload
Plugin 'kien/ctrlp.vim'           " Ctrlp
Plugin 'tpope/vim-vinegar'        " Ctrlp
Plugin 'scrooloose/nerdcommenter' " the missing comment tool
Plugin 'scrooloose/syntastic'     " Multi language checker
Plugin 'tpope/vim-surround'       " Surrounder
Plugin 'jiangmiao/auto-pairs'
Plugin 'vim-scripts/scratch.vim'  " Block note into buffer
Plugin 'Shougo/neocomplcache.vim' " Autocompletion
Plugin 'sdanielf/vim-stdtabs'     " Standard indentation matching language
Plugin 'tpope/vim-fugitive'       " Git for git blame..
Plugin 'bufkill.vim'              " Kill buffer :bd
Plugin 'SirVer/ultisnips'         " Snippet solution for Vim

Plugin 'takac/vim-hardtime'

" UI
" --
Plugin 'w0ng/vim-hybrid'

" Nice to have but not required for you Jedi
" ------------------------------------------
Plugin 'majutsushi/tagbar'               " IDE like navigator into methods
Plugin 'nathanaelkane/vim-indent-guides' " Indentation guide <leader>ig
Plugin 'skwp/greplace.vim'               " Replace into multifiles
Plugin 'mattn/emmet-vim'                 " html tags
Plugin 'tpope/vim-markdown'
Plugin 'junegunn/vim-easy-align'

" Specific to projects
" --------------------
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'groenewege/vim-less'
Plugin 'nono/vim-handlebars'
Plugin 'othree/html5.vim'
Plugin 'elzr/vim-json'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'pangloss/vim-javascript'
Plugin 'fatih/vim-go'
" Plugin 'mxw/vim-jsx'
Plugin 'derekwyatt/vim-scala'

call vundle#end()            " required

filetype plugin on
filetype indent on
syntax on

" color settings (if terminal/gui supports it)
if $TERM =~ '256color'
  set t_Co=256
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
elseif $TERM =~ '^xterm$'
  set t_Co=256
endif

if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif

" display settings
set background=dark     " enable for dark terminals
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show line numbers
set showmatch           " show matching bracket (briefly jump)
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildmode=longest:full,full
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set matchpairs+=<:>     " specially for html

" editor settings
set colorcolumn=80             " Colum lenght
set autoindent smartindent     " turn on auto/smart indenting
set smarttab                   " smart tab handling for indenting
set magic                      " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set tabstop=2                  " number of spaces a tab counts for
set shiftwidth=2               " spaces for autoindents
set expandtab                  " turn a tabs into spaces
set undolevels=10000           " number of forgivable mistakes
set timeoutlen=3000
set fileformat=unix            " file mode is unix
set diffopt=filler,iwhite      " ignore all whitespace and sync

set encoding=utf-8
set fileencoding=utf-8

" Trim trailing whitespace when saving a document
autocmd BufWritePre * :%s/\s\+$//e

"Better line wrapping
set wrap
set textwidth=80
set formatoptions=qrn1

"Enable code folding
set foldenable

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase           " but become case sensitive if you type uppercase characters

" system settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set hidden              " remember undo after quitting
set history=1000        " keep 1000 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           " Hide mouse when typing
set splitright          " the new window is created on the right

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set undodir=~/.vim/tmp/undo//     " undo files
set backup                        " enable backup
set backupcopy=yes                " auto mode bug with a watcher task

" auto file reloading
set autoread
if !has('gui_running')
  " working thanks to vitality plugin and `set -g focus-events on` in tmux conf
 autocmd FocusGained,BufEnter * :silent! checktime
endif

" Remove bell beeping
set vb
set noeb vb t_vb=

" Color Scheme
set cursorline          " Higlight the current line
colorscheme hybrid

if executable('ag')
  set grepprg=ag\ --search-files\ --smart-case\ --nogroup\ --nocolor
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|botright cw|redraw!
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l -f --nocolor -g ""'
endif

" ==== Mappings ====================
" ==================================
" Disable useless and annoying keys
noremap Q <Nop>

nnoremap <Leader>p :CtrlPBuffer<CR>
nnoremap <Leader>T :CtrlPClearCache<CR>:CtrlP<CR>
" grep word under cursor
nnoremap <Leader>F :Ag <C-R><C-W><CR>
nnoremap <Leader>f :Ag<space>

vmap <Enter> <Plug>(EasyAlign)

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ev :tabedit $MYVIMRC<cr>

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

"----------------------
" Plugins configuration
"----------------------

" Airline
let g:airline_theme = 'dark'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#syntastic#enabled = 0

" Neocomplete
let g:neocomplcache_enable_at_startup = 1

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete colorcolumn=100
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" Gist
let g:gist_post_private = 1
let g:gist_detect_filetype = 1

" UltiSnips
let g:UltiSnipsEditSplit="vertical"

autocmd BufNewFile,BufRead *{-spec,Spec,-test}.js set ft=javascript.jasmine

" JSX
" let g:jsx_ext_required = 0

let g:syntastic_javascript_checkers = ['eslint']

" handlebars templates
autocmd BufNewFile,BufRead *.hb set ft=handlebars

" Nerdcommenter
let NERDSpaceDelims = 1

" Hardtime

let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
let g:hardtime_maxcount = 2
let g:list_of_normal_keys = ["h", "j", "k", "l", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
 augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
 augroup END
endif

" Clipper yank for tmux
nnoremap <leader>y :call system('nc localhost 8377', @0)<CR>

set clipboard=unnamed
" To see all leader mappings currently in use:
" grep -R leader .vimrc .vim/bundle | perl -pe 's/.+(<leader>\w+).+/\1/' | sort | uniq
