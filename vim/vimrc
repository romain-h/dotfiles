" reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

" filetype off                   " required! -> but bug with git

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Vundle manage
Bundle 'gmarik/vundle'

" Main (mandatory) bundles
" ------------------------
" Init vimrc by tpope
Bundle 'tpope/vim-sensible'
" Powerline with colors
Bundle 'Lokaltog/vim-powerline'
" AutoReload
Bundle 'sjl/vitality.vim'
" Search with ack
Bundle 'mileszs/ack.vim'
" Vinegar to use netrw
Bundle 'tpope/vim-vinegar'
" the missing comment tool
Bundle 'scrooloose/nerdcommenter'
" Multi language checker
Bundle 'scrooloose/syntastic'
" Surrounder
Bundle 'tpope/vim-surround'
Bundle 'jiangmiao/auto-pairs'
" Block note into buffer
Bundle 'vim-scripts/scratch.vim'
" Autocompletion
Bundle 'Shougo/neocomplcache.vim'
" Lazy search file navigator
Bundle 'kien/ctrlp.vim'
" Standard indentation matching language
Bundle 'sdanielf/vim-stdtabs'
" Git for git blame..
Bundle 'tpope/vim-fugitive'
" Colors
Bundle 'w0ng/vim-hybrid'

" Nice to have but not required for you Jedi
" ------------------------------------------
" IDE like navigator into methode
Bundle 'majutsushi/tagbar'
" Indentation guide <leader>ig
Bundle 'nathanaelkane/vim-indent-guides'
" Replace into multifiles
Bundle 'skwp/greplace.vim'
" html tags
Bundle 'mattn/emmet-vim'
Bundle 'tpope/vim-markdown'

" Specific to projects
" --------------------
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
Bundle 'groenewege/vim-less'
Bundle 'nono/vim-handlebars'
Bundle 'othree/html5.vim'
Bundle 'elzr/vim-json'
Bundle 'heavenshell/vim-jsdoc'
Bundle 'pangloss/vim-javascript'
Bundle 'kchmck/vim-coffee-script'
Bundle 'bufkill.vim'
Bundle 'jnwhiteh/vim-golang'

filetype plugin on
filetype indent on
syntax on

" color settings (if terminal/gui supports it)
if $TERM =~ '256color'
  set t_Co=256
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
elseif $TERM =~ '^xterm$'
  set t_Co=256
endif

if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif

" display settings
set background=dark     " enable for dark terminals
" set nowrap              " dont wrap lines
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show line numbers
set showmatch           " show matching bracket (briefly jump)
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set matchpairs+=<:>     " specially for html

" editor settings
set colorcolumn=80      " Colum lenght
set esckeys             " map missed escape sequences (enables keypad keys)
set autoindent smartindent      " turn on auto/smart indenting
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set list                " show invisibles
set tabstop=2           " number of spaces a tab counts for
set shiftwidth=2        " spaces for autoindents
set expandtab           " turn a tabs into spaces
set undolevels=10000             " number of forgivable mistakes
"set updatecount=100             " write swap file to disk every 100 chars
"set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion
"set viminfo=%100,'100,/100,h,\"500,:100,n~/.vim/viminfo
set timeoutlen=3000
set fileformat=unix     " file mode is unix
"set fileformats=unix,dos    " only detect unix file format, displays that ^M with dos files
set diffopt=filler,iwhite       " ignore all whitespace and sync
" set autowrite       "Write the old file out when switching between files.

set encoding=utf-8
set fileencoding=utf-8

" Trim trailing whitespace when saving a document
autocmd BufWritePre * :%s/\s\+$//e

"Better line wrapping
set wrap
set textwidth=80
set formatoptions=qrn1

"Enable code folding
set foldenable

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase           " but become case sensitive if you type uppercase characters

" system settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set hidden              " remember undo after quitting
set history=50          " keep 50 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           "Hide mouse when typing
set splitright          " the new window is created on the right

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap// " swap files
set undodir=~/.vim/tmp/undo// " undo files
set backup " enable backup

" auto file reloading
set autoread
if !has('gui_running')
  " working thanks to vitality plugin and `set -g focus-events on` in tmux conf
 autocmd FocusGained,BufEnter * :silent! checktime
endif

" Remove bell beeping
set vb

" Color Scheme
set cursorline          " Higlight the current line
" set rtp+=~/.vim/bundle/SunburstVIM/
colorscheme hybrid

set noeb vb t_vb=
" My Key bindings
  map <D-k> :NERDTreeToggle<CR>
  map <M-D-p> :ReadBookmarks

  map <Leader>f :Ack<space>
  map <Leader>p :CtrlPBuffer<cr>
  nmap <Leader>T :CtrlPClearCache<CR>:CtrlP<CR>
" Bubble single lines (kicks butt)
" http://vimcasts.org/episodes/bubbling-text/
" nmap <CA-Up> ddkP
" nmap <CA-Down> ddp

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ev :tabedit $MYVIMRC<cr>

"----------------------
" Plugins configuration
"----------------------

" let g:indent_guides_enable_on_vim_startup = 1
" NEOCOMPLCACHE
let g:neocomplcache_enable_at_startup = 1
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete colorcolumn=100
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" Gist
let g:gist_post_private = 1
let g:gist_detect_filetype = 1

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
 augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
 augroup END
endif
" Specifics functions
function! CopyMatches(reg)
  let hits = []
  %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/ge
  let reg = empty(a:reg) ? '+' : a:reg
  execute 'let @'.reg.' = join(hits, "\n") . "\n"'
endfunction
command! -register CopyMatches call CopyMatches(<q-reg>)
set clipboard=unnamed
